---
import type { Page } from "@components/Nav.astro";

interface Props {
  page: Page;
}

const { page } = Astro.props;
---

<script>
  import type { Page } from "@components/Nav.astro";

  class ProfileSection extends HTMLElement {
    observer: IntersectionObserver | null = null;
    static observedAttributes = ["id"];

    constructor() {
      super();
    }

    observePage(page: Page) {
      const options = {
        rootMargin: "10px",
        threshold: 1,
      };

      const navSetPage = new CustomEvent("nav:set-current-page", {
        detail: { page },
      });

      const rainStart = new CustomEvent("rain:start");
      const rainStop = new CustomEvent("rain:stop");

      this.observer = new IntersectionObserver((changes) => {
        if (changes[0].isIntersecting) {
          window.dispatchEvent(navSetPage);

          if (page === "home") {
            window.dispatchEvent(rainStart);
          } else {
            window.dispatchEvent(rainStop);
          }
        }
      }, options);

      this.observer.observe(this);
    }

    attributeChangedCallback(name: "id", oldValue: Page, newValue: Page) {
      if (name === "id" && oldValue !== newValue) {
        this.observePage(newValue);
      }
    }
  }

  customElements.define("profile-section", ProfileSection, {
    extends: "section",
  });
</script>

<section is="profile-section" id={page}>
  <slot />
</section>
