<style>
  canvas {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  const canvas = document.getElementById("cw") as HTMLCanvasElement;
  const context = canvas.getContext("2d");

  if (!context) throw new Error("No context");

  context.globalAlpha = 0.5;

  class RainDrop {
    x: number;
    y: number;
    gravity: number;
    rainDropTrailWidth: number;
    strokeColor: string;
    splashY: number;
    hasFallen: boolean = false;

    constructor(
      x: number,
      rainDropTrailWidth: number,
      strokeColor: string,
      splashY: number = window.innerHeight,

    ) {
      this.y = 0;
      this.x = x;
      this.gravity = Math.random() * 10;
      this.rainDropTrailWidth = rainDropTrailWidth;
      this.strokeColor = strokeColor;
      this.splashY = splashY;
    }

    fall() {
      if (!context) throw new Error("No context");
      context.beginPath();
      context.lineWidth = this.rainDropTrailWidth;
      context.strokeStyle = this.strokeColor;
      context.moveTo(this.x, this.y);
      if (this.y + this.gravity >= this.splashY) {
        this.y = this.splashY;
        this.splash();
      } else {
        this.y += this.gravity;
        this.hasFallen = this.y >= innerHeight;
      }
      context.lineTo(this.x, this.y);
      context.stroke();
    }

    splash() {
      this.hasFallen = true;
    }
  }

  type RoofSettings = {
    start: number;
    end: number;
    height: number;
  };

  class Cloud {
    rainDrops: RainDrop[] = [];
    fallingDrops: RainDrop[] = [];
    maxFallingDrops: number;
    roofSettings: RoofSettings;

    constructor(
      initialRainDrops: number,
      maxFallingDrops: number,
      roofSettings: RoofSettings,
    ) {
      this.roofSettings = roofSettings;
      this.maxFallingDrops = maxFallingDrops;
      for (let i = 0; i < initialRainDrops; i++) {
        this.addRainDrop();
      }
    }

    generateColor(): string {
      let hexSet = "0123456789ABCDEF";
      let finalHexString = "#";
      for (let i = 0; i < 6; i++) {
        finalHexString += hexSet[Math.ceil(Math.random() * 15)];
      }
      return finalHexString;
    }

    addRainDrop() {
      const dropX = Math.random() * innerWidth;
      this.rainDrops.push(
        new RainDrop(
          dropX,
          2,
          this.generateColor(),
          dropX > this.roofSettings.start && dropX < this.roofSettings.end
            ? this.roofSettings.height
            : undefined,
        ),
      );
    }

    dropRainDrop() {
      this.fallingDrops.push(this.rainDrops.pop() as RainDrop);
      this.addRainDrop();
    }

    rain() {
      if (!context) throw new Error("No context");
      if (this.fallingDrops.length < this.maxFallingDrops) {
        this.dropRainDrop();
      }

      this.fallingDrops.forEach((rainDrop, i) => {
        rainDrop.fall();
        if (rainDrop.hasFallen) {
          this.fallingDrops.splice(i, 1);
        }
      });
    }
  }

  class Roof {
    start: number;
    end: number;
    y: number;

    constructor(start: number, end: number, y: number) {
      this.start = start;
      this.end = end;
      this.y = y;
    }

    draw() {
      if (!context) throw new Error("No context");
      context.beginPath();
      context.lineWidth = 4;
      context.strokeStyle = "#fff";
      context.moveTo(this.start, this.y);
      context.lineTo(this.end, this.y);
      context.stroke();
    }
  }

  function setSize() {
    canvas.height = innerHeight;
    canvas.width = innerWidth;
  }
  addEventListener("resize", () => setSize());
  setSize();

  const roofStart = window.innerWidth / 4;
  const roofEnd = window.innerWidth - window.innerWidth / 4;
  const roofHeight = window.innerHeight / 2;
  const roof = new Roof(roofStart, roofEnd, roofHeight);
  const cloud = new Cloud(500, 350, { start: roofStart, end: roofEnd, height: roofHeight });

  setInterval(() => {
    context.clearRect(0, 0, canvas.width, canvas.height);
    roof.draw();
    cloud.rain();
  }, 10);
</script>

<canvas id="cw"></canvas>
